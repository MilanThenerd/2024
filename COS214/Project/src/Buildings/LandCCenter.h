#ifndef LANDCCENTER_H
#define LANDCCENTER_H

#include "Landmark.h"

/**
 * @class LandCCenter
 * @brief Represents a community center landmark building.
 *
 * The LandCCenter class inherits from the Landmark class and provides specific
 * implementations for managing visitors, resources, and employee interactions
 * at a community center.
 */
class LandCCenter : public Landmark
{
public:
    /**
     * @brief Default constructor for LandCCenter.
     */
    LandCCenter();

    /**
     * @brief Destructor for LandCCenter.
     */
    ~LandCCenter();

    /**
     * @brief Displays information about the community center building.
     */
    void displayBuildingInfo() override;

    /**
     * @brief Gets the number of visitors currently in the community center.
     * @return The number of visitors.
     */
    int getVisitors() override;

    /**
     * @brief Sets the number of visitors in the community center.
     * @param visitors The number of visitors to set.
     */
    void setVisitors(int visitors) override;

    /**
     * @brief Checks if the community center meets the requirements for construction.
     * @return True if build requirements are met, false otherwise.
     */
    bool checkBuildRequirements() override;

    // Observer methods

    /**
     * @brief Calls the utilities for the community center.
     */
    void callUtilities(); // Call Utilities in Buildings

    /**
     * @brief Gets the operational state of the community center.
     * @return True if the community center is operational, false otherwise.
     */
    bool getState();

    /**
     * @brief Sets the operational state of the community center.
     * @param state The operational state to set.
     */
    void setState(bool state);

    /**
     * @brief Gets the type of building.
     * @return A string representing the building type.
     */
    std::string getBuildingType();

    /**
     * @brief Adds an employee to the community center.
     * @param employee Pointer to the Citizen to be added as an employee.
     * @return True if the employee was successfully added, false otherwise.
     */
    bool addEmployee(Citizen *employee);

    /**
     * @brief Removes an employee from the community center.
     * @param employee Pointer to the Citizen to be removed as an employee.
     */
    void removeEmployee(Citizen *employee);

    /**
     * @brief Notifies the community center that an employee has left.
     * @param employee Pointer to the Citizen who has left.
     */
    void notifyEmployeeLeft(Citizen *employee);

    /**
     * @brief Checks if there are available jobs in the community center.
     * @return True if there are jobs available, false otherwise.
     */
    bool hasJob();

	int getElectricityUsage();
    int getWaterUsage();
    int getCurCitizenCount();

private:
    vector<Citizen *> employees; ///< List of employees at the community center

    // Resources
    int cost = 2000; ///< Cost to build the community center
    int jobCapacity = 10; ///< Maximum number of jobs available

    int woodCost = 20; ///< Wood cost for building
    int concreteCost = 30; ///< Concrete cost for building
    int steelCost = 15; ///< Steel cost for building

    int electricityUsage = 5; ///< Electricity usage of the community center
    int waterUsage = 10; ///< Water usage of the community center

    int happiness = 15; ///< Happiness generated by the community center

    int visitors; ///< Current number of visitors in the community center
    string type = "Landmark Community Center"; ///< Type of building
    bool operational; ///< Operational state of the community center
};

#endif // LANDCCENTER_H
