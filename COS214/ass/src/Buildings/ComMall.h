#ifndef COMMALL_H
#define COMMALL_H

#include "Commercial.h"

/**
 * @class ComMall
 * @brief Represents a commercial mall, extending the Commercial class.
 *
 * The ComMall class provides implementation for a mall building, 
 * including details about its resources, operational state, 
 * and employee management.
 */
class ComMall : public Commercial
{
public:
    /**
     * @brief Default constructor for ComMall.
     */
    ComMall();

    /**
     * @brief Destructor for ComMall.
     */
    ~ComMall();

    /**
     * @brief Displays information about the commercial mall.
     */
    void displayBuildingInfo() override;

    /**
     * @brief Gets the job capacity of the commercial mall.
     * @return The number of jobs the mall can accommodate.
     */
    virtual int getJobCapacity() override;

    /**
     * @brief Sets the job capacity of the commercial mall.
     * @param capacity The new job capacity to set.
     */
    virtual void setJobCapacity(int capacity) override;

    // Observer

    /**
     * @brief Calls utilities for the commercial mall.
     */
    void callUtilities(); // call Utilities in Buildings

    /**
     * @brief Gets the operational state of the commercial mall.
     * @return True if the mall is operational, false otherwise.
     */
    bool getState();

    /**
     * @brief Sets the operational state of the commercial mall.
     * @param state The new state to set.
     */
    void setState(bool state);

    /**
     * @brief Gets the type of the commercial mall.
     * @return A string representing the building type.
     */
    string getBuildingType();

    /**
     * @brief Adds an employee to the commercial mall.
     * @param employee A pointer to the Citizen representing the employee.
     * @return True if the employee was added successfully, false otherwise.
     */
    bool addEmployee(Citizen *employee);

    /**
     * @brief Removes an employee from the commercial mall.
     * @param employee A pointer to the Citizen representing the employee.
     */
    void removeEmployee(Citizen *employee);

    /**
     * @brief Notifies that an employee has left the commercial mall.
     * @param employee A pointer to the Citizen representing the employee.
     */
    void notifyEmployeeLeft(Citizen *employee);

    /**
     * @brief Checks if there are jobs available in the mall.
     * @return True if there are available jobs, false otherwise.
     */
    bool hasJob();

private:
    vector<Citizen *> employees; ///< List of employees working in the mall.

    // Resources
    int cost = BuildingRequirements::mallBuildCost; ///< Cost of constructing the mall.
    int jobCapacity = 100; ///< Maximum number of jobs available in the mall.
    
    int woodCost = BuildingRequirements::mallWoodCost; ///< Cost of wood for construction.
    int concreteCost = BuildingRequirements::mallConcreteCost; ///< Cost of concrete for construction.
    int steelCost = BuildingRequirements::mallSteelCost; ///< Cost of steel for construction.

    int electricityUsage = 20; ///< Electricity usage of the mall.
    int waterUsage = 20; ///< Water usage of the mall.

    int income = 500; ///< Income generated by the mall.

    string type = "Commercial Mall"; ///< Type of the building.
    bool operational; ///< Operational state of the mall (part of Observer).
};

#endif // COMMALL_H
